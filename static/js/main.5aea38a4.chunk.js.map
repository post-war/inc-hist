{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["allData","ExpandMore","styled","props","expand","other","_objectWithoutProperties","React","createElement","IconButton","_ref","theme","transform","marginLeft","transition","transitions","create","duration","shortest","IncidentCard","_ref2","JobName","ReportedDate","IncidentID","Summary","Notes","WorkDetails","MQ","_React$useState","useState","_React$useState2","_slicedToArray","expanded","setExpanded","Card","sx","maxWidth","border","borderRadius","margin","key","CardHeader","avatar","Avatar","bgcolor","red","aria-label","title","subheader","CardContent","Chip","size","label","style","background","color","Typography","variant","CardActions","disableSpacing","onClick","aria-expanded","ExpandMoreIcon","Collapse","in","timeout","unmountOnExit","component","SearchIncident","_React$useState3","_React$useState4","filteredData","setFilteredData","_React$useState5","_React$useState6","displayedData","setDisplayedData","_useState","_useState2","hasMore","setHasMore","_useState3","_useState4","nextIndex","setNextIndex","_useState5","_useState6","searchInput","setSearchInput","countRef","useRef","useEffect","current","console","log","concat","length","slice","padding","Grid","container","direction","justifyContent","alignItems","item","xs","position","top","TextField","id","value","onChange","e","searchValue","target","filter","toLowerCase","includes","InfiniteScroll","dataLength","next","loader","height","endMessage","textAlign","map","dta","index","ResolvedDate","Resolution","SubmitDate","SubmitterName","Submitter","Status","Assignee","AssignedGroup","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.5aea38a4.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { styled } from '@mui/material/styles';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport CardActions from '@mui/material/CardActions';\nimport Collapse from '@mui/material/Collapse';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Chip from '@mui/material/Chip';\nimport { blue, blueGrey, lightBlue, red } from '@mui/material/colors';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\nimport SearchIcon from '@mui/icons-material/Search';\n\nimport all from './data.json';\n\ninterface ExpandMoreProps extends IconButtonProps {\n  expand: boolean;\n}\n\ninterface Incident {\n  JobName:      string;\n  IncidentID:   string;\n  WorkDetails?:  string;\n  Notes:        string;\n  Summary:      string;\n  ReportedDate: string;\n  ResolvedDate?: string;\n  Resolution?:   string;\n  SubmitDate:   string;\n  SubmitterName: string;\n  Submitter:    string;\n  Status:       string;\n  Assignee:     string;\n  AssignedGroup: string;\n  MQ:           string;\n}\n\nconst allData = all  as Incident[];\n\nconst ExpandMore = styled((props: ExpandMoreProps) => {\n  const { expand, ...other } = props;\n  return <IconButton {...other} />;\n})(({ theme, expand }) => ({\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n  marginLeft: 'auto',\n  transition: theme.transitions.create('transform', {\n    duration: theme.transitions.duration.shortest,\n  }),\n}));\n\nconst IncidentCard: React.FC<Incident> = \n        ({JobName, ReportedDate, IncidentID,\n           Summary, Notes, WorkDetails, MQ}) => {\n// function IncidentCard( JobName: string, ReportedDate: string, IncidentID:string, Notes:string, WorkDetails:string ) {\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  return (\n    <Card sx={{  maxWidth: 700,  border: 1, borderRadius: 2, margin: .5 }} key={IncidentID}>\n      <CardHeader\n         avatar={\n          <Avatar sx={{ bgcolor: red[200] }} aria-label=\"remedy\">\n            Job\n          </Avatar> \n       /*  avatar={<Avatar\n              alt=\"Remedy\"\n              src=\"History.png\"\n              sx={{ width: 40, height: 40 }}\n              variant=\"rounded\"\n              />   */\n        }\n        title={JobName}\n        subheader={ReportedDate}\n        \n      />\n      <CardContent>\n        {(MQ == \"X\") ?\n          <Chip size=\"small\" label=\"MQ/FTE\" style={{ background: \"CornflowerBlue\", color: \"White\" }} />\n          : <Typography variant=\"body2\" color=\"text.secondary\"> </Typography>\n        }\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Incident No: {IncidentID}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Summary: {Summary}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Notes: {Notes}\n        </Typography>\n      </CardContent>\n      <CardActions disableSpacing>\n        <ExpandMore\n          expand={expanded}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </ExpandMore>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Typography>Work Details:</Typography>\n          {/* component=pre to replace all \\n in text to actual newline  */}\n          <Typography variant=\"body2\" color=\"text.secondary\" component=\"pre\">\n             {WorkDetails}\n          </Typography>\n         </CardContent>\n      </Collapse>\n    </Card>\n  );\n}\n\nexport default function SearchIncident() {\n  //const [allData, setAllData] = React.useState<jsonData>();\n  const [filteredData, setFilteredData] = React.useState<Array<Incident>>([]);\n  const [displayedData, setDisplayedData] = React.useState<Array<Incident>>([]);\n  const [hasMore, setHasMore] = useState<boolean>(true);\n  const [nextIndex, setNextIndex] = useState<number>(0);\n  const [searchInput, setSearchInput] = useState('');\n  // useRef is a special state variable but doesn't cause re-render on update \n  const countRef = useRef(0);\n\n  useEffect(() => {\n    countRef.current++;\n    console.log(`in useEffect ${countRef.current} `);\n    if (countRef.current == 1) {\n      // Read data.json file\n /*      fetch('./data.json')\n        .then((response) =>\n         {if (!response.ok) {\n          throw new Error(response.statusText)\n        }\n          response.json()})\n        .then((json) => setAllData(json))\n        .catch(err => {\n          console.log(err);\n        }); */\n        console.log(`in useEffect after fetch ${allData.length} `);\n        setDisplayedData(allData.slice(0,50));\n        setNextIndex(50);\n        nextIndex > allData.length ? setHasMore(false) : setHasMore(true)\n    }\n  }, []);\n\n  const fetchMoreData = () => {\n    console.log(`in fetchMoreData ${searchInput} ${nextIndex}`);\n    if (searchInput !== '') {\n      setDisplayedData(displayedData.concat(filteredData.slice(nextIndex,nextIndex + 50)));\n      setNextIndex(nextIndex + 50);\n      nextIndex > filteredData.length ? setHasMore(false) : setHasMore(true)\n    } else {\n      setDisplayedData(displayedData.concat(allData.slice(nextIndex,nextIndex + 50)));\n      setNextIndex(nextIndex + 50);\n      nextIndex > allData.length ? setHasMore(false) : setHasMore(true)\n    }\n  };\n\n  const searchItems = (searchValue: string) => {\n    \n    if (searchValue !== '') {\n      setFilteredData(allData.filter((item: Incident) => item.JobName.toLowerCase().includes(searchValue.toLowerCase())))\n      setDisplayedData(filteredData.slice(0,50));\n      setNextIndex(50);\n      nextIndex > filteredData.length ? setHasMore(false) : setHasMore(true) \n    }\n    else{\n      setFilteredData([])\n      setDisplayedData(allData.slice(0,50));\n      setNextIndex(50);\n      nextIndex > allData.length ? setHasMore(false) : setHasMore(true)\n    }\n    setSearchInput(searchValue)\n  }\n\n  const handleRefreshSearch = (e: Event) => {\n    displayedData.length = 0;\n    displayedData.concat(allData.slice(0,50));\n    setNextIndex(50);\n    nextIndex > allData.length ? setHasMore(false) : setHasMore(true) \n  }\n\n  return (\n    <div style={{ padding: 20 }}>\n      <Grid container\n            direction=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n      >\n      <Grid item xs={2}>\n        <Typography></Typography>\n      </Grid>\n      <Grid item xs={8}>\n         <Card sx={{ maxWidth: 700,  border: 1, borderRadius: 2, margin: .5, position: 'sticky', top: 0}}>\n            <CardContent>\n            <Typography> \n            \n              <TextField label=\"Search Incidents\"\n               id=\"outlined-size-small\"\n               variant=\"outlined\"\n               size=\"small\"\n               value={searchInput}\n               onChange={(e) => searchItems(e.target.value)}/>\n            </Typography>\n            </CardContent>\n          </Card>\n\n        <InfiniteScroll\n          dataLength={displayedData.length}\n          next={fetchMoreData}\n          hasMore={hasMore}\n          loader={<h4>Loading...</h4>}\n          height={800}\n          endMessage={\n            <p style={{ textAlign: \"center\" }}>\n              <b>You have reached the end</b>\n            </p>\n          }\n        >\n          \n            {displayedData.map((dta: Incident, index) => (\n              <IncidentCard \n                JobName = {dta.JobName}\n                ReportedDate = {dta.ReportedDate}\n                IncidentID = {dta.IncidentID}\n                Notes = {dta.Notes}\n                WorkDetails = {dta.WorkDetails}\n                ResolvedDate= {dta.ResolvedDate}\n                Summary= {dta.Summary}\n                Resolution= {dta.Resolution}\n                SubmitDate= {dta.SubmitDate}\n                SubmitterName= {dta.SubmitterName}\n                Submitter= {dta.Submitter}\n                Status= {dta.Status}\n                Assignee= {dta.Assignee}\n                AssignedGroup= {dta.AssignedGroup}\n                MQ= {dta.MQ}\n                />\n            ))}\n         \n        </InfiniteScroll>\n        </Grid>\n\n        <Grid item xs={2}>\n          <Typography></Typography>\n        </Grid>\n\n        </Grid>\n\n    </div>\n\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}